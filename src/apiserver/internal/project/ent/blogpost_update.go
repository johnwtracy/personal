// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/johnwtracy/personal/src/apiserver/internal/project/ent/blogpost"
	"github.com/johnwtracy/personal/src/apiserver/internal/project/ent/predicate"
	"github.com/johnwtracy/personal/src/apiserver/internal/project/ent/topic"
)

// BlogPostUpdate is the builder for updating BlogPost entities.
type BlogPostUpdate struct {
	config
	hooks      []Hook
	mutation   *BlogPostMutation
	predicates []predicate.BlogPost
}

// Where adds a new predicate for the builder.
func (bpu *BlogPostUpdate) Where(ps ...predicate.BlogPost) *BlogPostUpdate {
	bpu.predicates = append(bpu.predicates, ps...)
	return bpu
}

// SetHead sets the head field.
func (bpu *BlogPostUpdate) SetHead(s string) *BlogPostUpdate {
	bpu.mutation.SetHead(s)
	return bpu
}

// SetBody sets the body field.
func (bpu *BlogPostUpdate) SetBody(s string) *BlogPostUpdate {
	bpu.mutation.SetBody(s)
	return bpu
}

// AddTagIDs adds the tags edge to Topic by ids.
func (bpu *BlogPostUpdate) AddTagIDs(ids ...int) *BlogPostUpdate {
	bpu.mutation.AddTagIDs(ids...)
	return bpu
}

// AddTags adds the tags edges to Topic.
func (bpu *BlogPostUpdate) AddTags(t ...*Topic) *BlogPostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bpu.AddTagIDs(ids...)
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpu *BlogPostUpdate) Mutation() *BlogPostMutation {
	return bpu.mutation
}

// RemoveTagIDs removes the tags edge to Topic by ids.
func (bpu *BlogPostUpdate) RemoveTagIDs(ids ...int) *BlogPostUpdate {
	bpu.mutation.RemoveTagIDs(ids...)
	return bpu
}

// RemoveTags removes tags edges to Topic.
func (bpu *BlogPostUpdate) RemoveTags(t ...*Topic) *BlogPostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bpu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bpu *BlogPostUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bpu.mutation.Head(); ok {
		if err := blogpost.HeadValidator(v); err != nil {
			return 0, &ValidationError{Name: "head", err: fmt.Errorf("ent: validator failed for field \"head\": %w", err)}
		}
	}
	if v, ok := bpu.mutation.Body(); ok {
		if err := blogpost.BodyValidator(v); err != nil {
			return 0, &ValidationError{Name: "body", err: fmt.Errorf("ent: validator failed for field \"body\": %w", err)}
		}
	}
	if _, ok := bpu.mutation.UpdateTime(); !ok {
		v := blogpost.UpdateDefaultUpdateTime()
		bpu.mutation.SetUpdateTime(v)
	}

	var (
		err      error
		affected int
	)
	if len(bpu.hooks) == 0 {
		affected, err = bpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bpu.mutation = mutation
			affected, err = bpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bpu.hooks) - 1; i >= 0; i-- {
			mut = bpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BlogPostUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BlogPostUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BlogPostUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bpu *BlogPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blogpost.Table,
			Columns: blogpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: blogpost.FieldID,
			},
		},
	}
	if ps := bpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.Head(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blogpost.FieldHead,
		})
	}
	if value, ok := bpu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blogpost.FieldBody,
		})
	}
	if value, ok := bpu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blogpost.FieldUpdateTime,
		})
	}
	if nodes := bpu.mutation.RemovedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogpost.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BlogPostUpdateOne is the builder for updating a single BlogPost entity.
type BlogPostUpdateOne struct {
	config
	hooks    []Hook
	mutation *BlogPostMutation
}

// SetHead sets the head field.
func (bpuo *BlogPostUpdateOne) SetHead(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetHead(s)
	return bpuo
}

// SetBody sets the body field.
func (bpuo *BlogPostUpdateOne) SetBody(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetBody(s)
	return bpuo
}

// AddTagIDs adds the tags edge to Topic by ids.
func (bpuo *BlogPostUpdateOne) AddTagIDs(ids ...int) *BlogPostUpdateOne {
	bpuo.mutation.AddTagIDs(ids...)
	return bpuo
}

// AddTags adds the tags edges to Topic.
func (bpuo *BlogPostUpdateOne) AddTags(t ...*Topic) *BlogPostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bpuo.AddTagIDs(ids...)
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpuo *BlogPostUpdateOne) Mutation() *BlogPostMutation {
	return bpuo.mutation
}

// RemoveTagIDs removes the tags edge to Topic by ids.
func (bpuo *BlogPostUpdateOne) RemoveTagIDs(ids ...int) *BlogPostUpdateOne {
	bpuo.mutation.RemoveTagIDs(ids...)
	return bpuo
}

// RemoveTags removes tags edges to Topic.
func (bpuo *BlogPostUpdateOne) RemoveTags(t ...*Topic) *BlogPostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bpuo.RemoveTagIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (bpuo *BlogPostUpdateOne) Save(ctx context.Context) (*BlogPost, error) {
	if v, ok := bpuo.mutation.Head(); ok {
		if err := blogpost.HeadValidator(v); err != nil {
			return nil, &ValidationError{Name: "head", err: fmt.Errorf("ent: validator failed for field \"head\": %w", err)}
		}
	}
	if v, ok := bpuo.mutation.Body(); ok {
		if err := blogpost.BodyValidator(v); err != nil {
			return nil, &ValidationError{Name: "body", err: fmt.Errorf("ent: validator failed for field \"body\": %w", err)}
		}
	}
	if _, ok := bpuo.mutation.UpdateTime(); !ok {
		v := blogpost.UpdateDefaultUpdateTime()
		bpuo.mutation.SetUpdateTime(v)
	}

	var (
		err  error
		node *BlogPost
	)
	if len(bpuo.hooks) == 0 {
		node, err = bpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bpuo.mutation = mutation
			node, err = bpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bpuo.hooks) - 1; i >= 0; i-- {
			mut = bpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BlogPostUpdateOne) SaveX(ctx context.Context) *BlogPost {
	bp, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return bp
}

// Exec executes the query on the entity.
func (bpuo *BlogPostUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BlogPostUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bpuo *BlogPostUpdateOne) sqlSave(ctx context.Context) (bp *BlogPost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blogpost.Table,
			Columns: blogpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: blogpost.FieldID,
			},
		},
	}
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BlogPost.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := bpuo.mutation.Head(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blogpost.FieldHead,
		})
	}
	if value, ok := bpuo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blogpost.FieldBody,
		})
	}
	if value, ok := bpuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blogpost.FieldUpdateTime,
		})
	}
	if nodes := bpuo.mutation.RemovedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	bp = &BlogPost{config: bpuo.config}
	_spec.Assign = bp.assignValues
	_spec.ScanValues = bp.scanValues()
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogpost.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return bp, nil
}
