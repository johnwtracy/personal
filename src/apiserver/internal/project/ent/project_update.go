// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/johnwtracy/personal/src/apiserver/internal/project/ent/predicate"
	"github.com/johnwtracy/personal/src/apiserver/internal/project/ent/project"
	"github.com/johnwtracy/personal/src/apiserver/internal/project/ent/topic"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks      []Hook
	mutation   *ProjectMutation
	predicates []predicate.Project
}

// Where adds a new predicate for the builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetHead sets the head field.
func (pu *ProjectUpdate) SetHead(s string) *ProjectUpdate {
	pu.mutation.SetHead(s)
	return pu
}

// SetBody sets the body field.
func (pu *ProjectUpdate) SetBody(s string) *ProjectUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetStarted sets the started field.
func (pu *ProjectUpdate) SetStarted(t time.Time) *ProjectUpdate {
	pu.mutation.SetStarted(t)
	return pu
}

// SetCompleted sets the completed field.
func (pu *ProjectUpdate) SetCompleted(t time.Time) *ProjectUpdate {
	pu.mutation.SetCompleted(t)
	return pu
}

// SetNillableCompleted sets the completed field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCompleted(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetCompleted(*t)
	}
	return pu
}

// ClearCompleted clears the value of completed.
func (pu *ProjectUpdate) ClearCompleted() *ProjectUpdate {
	pu.mutation.ClearCompleted()
	return pu
}

// AddTagIDs adds the tags edge to Topic by ids.
func (pu *ProjectUpdate) AddTagIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddTagIDs(ids...)
	return pu
}

// AddTags adds the tags edges to Topic.
func (pu *ProjectUpdate) AddTags(t ...*Topic) *ProjectUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTagIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// RemoveTagIDs removes the tags edge to Topic by ids.
func (pu *ProjectUpdate) RemoveTagIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveTagIDs(ids...)
	return pu
}

// RemoveTags removes tags edges to Topic.
func (pu *ProjectUpdate) RemoveTags(t ...*Topic) *ProjectUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.Head(); ok {
		if err := project.HeadValidator(v); err != nil {
			return 0, &ValidationError{Name: "head", err: fmt.Errorf("ent: validator failed for field \"head\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Body(); ok {
		if err := project.BodyValidator(v); err != nil {
			return 0, &ValidationError{Name: "body", err: fmt.Errorf("ent: validator failed for field \"body\": %w", err)}
		}
	}
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := project.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Head(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldHead,
		})
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldBody,
		})
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.Started(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldStarted,
		})
	}
	if value, ok := pu.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldCompleted,
		})
	}
	if pu.mutation.CompletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: project.FieldCompleted,
		})
	}
	if nodes := pu.mutation.RemovedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// SetHead sets the head field.
func (puo *ProjectUpdateOne) SetHead(s string) *ProjectUpdateOne {
	puo.mutation.SetHead(s)
	return puo
}

// SetBody sets the body field.
func (puo *ProjectUpdateOne) SetBody(s string) *ProjectUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetStarted sets the started field.
func (puo *ProjectUpdateOne) SetStarted(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetStarted(t)
	return puo
}

// SetCompleted sets the completed field.
func (puo *ProjectUpdateOne) SetCompleted(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetCompleted(t)
	return puo
}

// SetNillableCompleted sets the completed field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCompleted(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetCompleted(*t)
	}
	return puo
}

// ClearCompleted clears the value of completed.
func (puo *ProjectUpdateOne) ClearCompleted() *ProjectUpdateOne {
	puo.mutation.ClearCompleted()
	return puo
}

// AddTagIDs adds the tags edge to Topic by ids.
func (puo *ProjectUpdateOne) AddTagIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddTagIDs(ids...)
	return puo
}

// AddTags adds the tags edges to Topic.
func (puo *ProjectUpdateOne) AddTags(t ...*Topic) *ProjectUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTagIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// RemoveTagIDs removes the tags edge to Topic by ids.
func (puo *ProjectUpdateOne) RemoveTagIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveTagIDs(ids...)
	return puo
}

// RemoveTags removes tags edges to Topic.
func (puo *ProjectUpdateOne) RemoveTags(t ...*Topic) *ProjectUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTagIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	if v, ok := puo.mutation.Head(); ok {
		if err := project.HeadValidator(v); err != nil {
			return nil, &ValidationError{Name: "head", err: fmt.Errorf("ent: validator failed for field \"head\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Body(); ok {
		if err := project.BodyValidator(v); err != nil {
			return nil, &ValidationError{Name: "body", err: fmt.Errorf("ent: validator failed for field \"body\": %w", err)}
		}
	}
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := project.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}

	var (
		err  error
		node *Project
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (pr *Project, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Project.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Head(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldHead,
		})
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldBody,
		})
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.Started(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldStarted,
		})
	}
	if value, ok := puo.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldCompleted,
		})
	}
	if puo.mutation.CompletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: project.FieldCompleted,
		})
	}
	if nodes := puo.mutation.RemovedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Project{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
